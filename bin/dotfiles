#!/usr/bin/env python3
"""
Setup dotfiles
"""

import os
import sys
import shutil
import socket
import fileinput
import argparse
from subprocess import Popen, PIPE

#####################################################################
# Prints (with colors)
#####################################################################

COLOR_RESET = '\033[0m'
COLOR_RED = '\033[31m'
COLOR_GREEN = '\033[32m'
COLOR_YELLOW = '\033[33m'
COLOR_BLUE = '\033[34m'


def print_header(message):
    print('\n' + COLOR_BLUE + '▶ ' + COLOR_RESET + message)


def print_success(message):
    print(COLOR_GREEN + '    ✔ ' + COLOR_RESET + message)


def print_progress(count, total):
    barLength = 40
    percent = int(round((count / total) * 100))
    nb_bar_fill = int(round((barLength * percent) / 100))
    bar_fill = '=' * nb_bar_fill
    bar_empty = ' ' * (barLength - nb_bar_fill)
    symbol = COLOR_BLUE + '➤' + COLOR_RESET
    if count == total:
        symbol = COLOR_GREEN + '✔' + COLOR_RESET

    sys.stdout.write("\r    {} [{}] {}/{}".format(symbol, str(bar_fill + bar_empty), count, total))
    sys.stdout.flush()


def print_info(message):
    print(COLOR_BLUE + '    ➤ ' + COLOR_RESET + message)


def print_warning(message):
    print(COLOR_YELLOW + '    ⚠ ' + COLOR_RESET + message)


def print_error(message):
    print(COLOR_RED + '    ✖ ' + COLOR_RESET + message)


def print_question(question):
    return input('\n' + COLOR_YELLOW + '➜ ' + COLOR_RESET + question + ' ')


#####################################################################
# Helpers
#####################################################################


def assure_dir_exist(path):
    """ Create parents folders """
    dir_path = os.path.dirname(os.path.expanduser(path))
    if not os.path.exists(dir_path):
        try:
            os.makedirs(dir_path)
        except OSError as exc:
            print_error("{}".format(exc))


def exec_command(command, show_errors=True):
    """ Execute a system command """
    p = Popen(command, stdout=PIPE, stderr=PIPE)
    output, errors = p.communicate()

    if p.returncode != 0 and show_errors:
        print_error(errors.decode('UTF-8'))

    return p.returncode == 0


def check_requirements():
    """
    Exit if git isn't installed or Github isn't reachable
    """
    # Need git
    if not shutil.which('git'):
        print_error('Git is missing. Aborting.')
        sys.exit(2)

    # Github access
    try:
        # DNS listening
        host = socket.gethostbyname('github.com')
        # Host is actually reachable
        socket.create_connection((host, 80), 2)
    except:
        print_error('Github can\'t be reach')
        sys.exit(3)


def X_is_installed():
    """
    Try to guess if x is installed
    """
    return shutil.which('startx')


def is_hidpi():
    """
    Get screen width resolution. If it's looks big, return true
    """
    output = Popen(
        'xrandr | grep "\*" | sort -nr | head -n 1 | cut -d" " -f4', shell=True, stdout=PIPE,
        stderr=PIPE).communicate()
    try:
        resolution = output[0].decode('UTF-8').split()[0].split('x')
        width = int(resolution[0])
        height = int(resolution[1])
        return (width > 2600 and height > 1600)
    except IndexError:
        # Without display
        return False


def count_files(rootFolder):
    """
    Recursive count files in rootFolder
    """
    total = 0
    for root, dirs, files in os.walk(rootFolder):
        total += len(files)
    return total


#####################################################################
# Symlinks
#####################################################################


def symlink_arbo(rootSource, rootDestination, with_sudo=False):
    """
    Scan "app" directory and create an equivalent symlink
    in home for each file.
    If X is running, scan also "appdesktop"
    """
    count = 0
    total = count_files(rootSource)

    for dirName, subdirList, fileList in os.walk(rootSource):
        for fileName in fileList:
            # Get relative dir from dotfiles root
            relativeDir = os.path.relpath(dirName, rootSource)
            # Add file name and handle "." (with normpath)
            relativeFile = os.path.normpath(os.path.join(relativeDir, fileName))

            # Create absolutes paths
            source = os.path.join(rootSource, relativeFile)
            destination = os.path.join(rootDestination, relativeFile)

            count += 1
            if with_sudo:
                if not symlink_root(source, destination):
                    return False
            else:
                if not symlink(source, destination):
                    return False

            # Update the same line each time
            print_progress(count, total)

    print()
    return True


def symlink(src, dest):
    """
    Make a symlink
    """
    # Remove existing symlink
    if os.path.lexists(dest):
        os.remove(dest)
    # Check if source exist
    if os.path.exists(src):
        # Create directories if necessary
        assure_dir_exist(dest)
        # Make symlink
        os.symlink(src, dest)
        return True
    else:
        print_error(src + " doesn't exist")
        return False


def symlink_root(src, dest):
    """
    Make a symlink with sudo (no update if it already exists)
    """
    # Check if source exist
    if os.path.exists(src):
        # Check if destination already exist
        if os.path.exists(dest):
            # print_info('Symlink (sudo) exist: ' + os.path.basename(dest))
            return True
        # Create directories if necessary
        assure_dir_exist(dest)
        # Make symlink
        return exec_command(['sudo', 'ln', '-s', src, dest])
    else:
        print_error(src + " doesn't exist")
        return False


#####################################################################
# Compile
#####################################################################


def dconf_load(appconf):
    """ Load dconf settings """
    for confname in os.listdir(appconf):
        p = Popen('dconf load / < {}'.format(os.path.join(appconf, confname)), shell=True, stdout=PIPE, stderr=PIPE)
        output, errors = p.communicate()

        if p.returncode != 0:
            print_error(errors.decode('UTF-8'))
        else:
            print_success('Load {}'.format(confname))


#####################################################################
# Compile
#####################################################################


def generate_config(outfilename, filenames, comment='#'):
    """ Generate config from multiple files """
    with open(outfilename, 'w') as fout:
        fout.write('{0} DO NOT EDIT THIS FILE BY HAND.\n{0} YOUR CHANGES WILL BE OVERWRITTEN !\n\n'.format(comment))
        for line in fileinput.input(filenames):
            fout.write(line)
    print_success('Generated: ' + outfilename)


#####################################################################
# Git
#####################################################################


def git_clone(url, destination):
    print_info('Clone ' + destination)
    return exec_command(['git', 'clone', url, destination])


def git_pull(destination):
    print_info('Update ' + destination)
    return exec_command(
        ['git', '--work-tree=' + destination, '--git-dir=' + destination + '/.git', 'pull', 'origin', 'master'])


def git_version(destination):
    """ Get current commit """
    p = Popen(['git', '--work-tree=' + destination, '--git-dir=' + destination + '/.git', 'rev-parse', 'HEAD'],
              stdout=PIPE,
              stderr=PIPE)
    version, errors = p.communicate()
    if p.returncode != 0:
        print_error(errors.decode('UTF-8'))
        return False
    else:
        return version


def git_clone_or_update_dotfiles(dotfilesurl, dotfilespath, restarted=False):
    """ Clone or update dotfiles """
    print_header('Dotfiles updated' if restarted else 'Dotfiles')

    if not os.path.exists(dotfilespath):
        # dotfiles directory doesn't exist? Clone it
        git_clone(dotfilesurl, dotfilespath)

    else:
        # Get current commit
        dot_version_prev = git_version(dotfilespath)

        # Update
        git_pull(dotfilespath)

        # Get current commit
        dot_version_next = git_version(dotfilespath)

        if dot_version_prev != dot_version_next:
            # Restart current script if version change
            os.execl(sys.executable, sys.executable, sys.argv[0], '--restart', *sys.argv[1:])


#####################################################################
# Main
#####################################################################


def main(dotfilespath, restarted):
    hostname = socket.gethostname()

    # Requirements
    check_requirements()

    # Self update
    git_clone_or_update_dotfiles('https://github.com/Silvus/dotfiles.git', dotfilespath, restarted)

    # Make symlinks
    print_header('Symlinks apps')
    if symlink_arbo(os.path.join(dotfilespath, 'app'), os.path.expanduser('~')):

        print_header('Symlinks root apps')
        symlink_arbo(os.path.join(dotfilespath, 'approot'), '/', True)

        # Host specifics app files
        if os.path.isdir(os.path.join(dotfilespath, 'app_{}'.format(hostname))):
            print_header('Symlinks {} specifics apps'.format(hostname))
            symlink_arbo(os.path.join(dotfilespath, 'app_{}'.format(hostname)), os.path.expanduser('~'))

        if X_is_installed():
            print_header('Symlinks desktop apps')
            symlink_arbo(os.path.join(dotfilespath, 'appdesktop'), os.path.expanduser('~'))

            # Host specifics desktop app files
            if os.path.isdir(os.path.join(dotfilespath, 'appdesktop_{}'.format(hostname))):
                print_header('Symlinks {} specifics desktop apps'.format(hostname))
                symlink_arbo(os.path.join(dotfilespath, 'appdesktop_{}'.format(hostname)), os.path.expanduser('~'))

            # Reload .Xresources
            exec_command(['xrdb', os.path.expanduser('~/.Xresources')])

    # import dconf settings
    if shutil.which('dconf'):
        print_header('Dconf')
        dconf_load(os.path.join(dotfilespath, 'appconf'))

    # ST3 Hidpi special case
    if X_is_installed() and is_hidpi():
        print_header('Sublime Text 3 HiDPI')
        st_preference_file = os.path.expanduser('~/.config/sublime-text-3/Packages/User/Preferences.sublime-settings')
        # Replace symlink by original file
        if os.path.islink(st_preference_file):
            os.unlink(st_preference_file)
        # Copy te file and replace line with the dpi setting
        with open(
                os.path.join(
                    dotfilespath,
                    'appdesktop/.config/sublime-text-3/Packages/User/Preferences.sublime-settings')) as oldfile, open(
                        st_preference_file, 'w') as newfile:
            for line in oldfile:
                if 'dpi_scale' in line:
                    newfile.write('    "dpi_scale": 1.5,\n')
                else:
                    newfile.write(line)
        print_success('Generated: ' + st_preference_file)
    print()


if __name__ == '__main__':

    # Read arguments
    parser = argparse.ArgumentParser(prog='dotfiles')
    parser.add_argument(
        "-p", "--path", help="Dotfiles base path. Default ~/.dotfiles", default=os.path.expanduser('~/.dotfiles'))
    parser.add_argument("-r", "--restart", help=argparse.SUPPRESS, action="store_true", default=False)

    args = parser.parse_args()

    try:
        main(args.path, args.restart)

    except KeyboardInterrupt:
        print_error('Aborting...')
        sys.exit(1)

    sys.exit(0)

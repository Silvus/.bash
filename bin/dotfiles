#!/usr/bin/env bash

# Variables
# ========================================================

# Dotfiles directory (With default value if first install)
[[ -d "$DOTFILES_PATH"  ]] && DOTFILES_DIR="$(readlink -e "$(dirname "$0")/..")" || DOTFILES_DIR="$HOME/.dotfiles"

BASH_COMPLETION_DIR="/etc/bash_completion.d"
BACKUP_DIR="$DOTFILES_DIR/backup"
SUBLIMETEXT_CONF_DIR="$HOME/.config/sublime-text-3/Packages/User"
I3_CONFIG_FILE="$HOME/.i3/config"
SSHRC_CONFIG_FILE="$HOME/.sshrc"

# Colors
_TXTCOLOR_RED=$(tput setaf 1)
_TXTCOLOR_GREEN=$(tput setaf 2)
_TXTCOLOR_YELLOW=$(tput setaf 3)
_TXTCOLOR_BLUE=$(tput setaf 4)
# _TXTCOLOR_MAGENTA=$(tput setaf 5)
# _TXTCOLOR_CYAN=$(tput setaf 6)
_TXTCOLOR_RESET=$(tput sgr0)

# Functions
# ========================================================

# Echos
# --------------------------------------------------------
echo_header() {   echo -e "\n ${_TXTCOLOR_BLUE}⇒ $@${_TXTCOLOR_RESET}"; }
echo_success() {  echo " ${_TXTCOLOR_GREEN}✔${_TXTCOLOR_RESET} $@"; }
echo_info() {     echo " ${_TXTCOLOR_BLUE}➜${_TXTCOLOR_RESET} $@"; }
echo_warning() {  echo " ${_TXTCOLOR_YELLOW}⚠${_TXTCOLOR_RESET} $@"; }
echo_error() {    echo " ${_TXTCOLOR_RED}✖${_TXTCOLOR_RESET} $@"; }

# Make a symlink (backup if destination exist)
# --------------------------------------------------------
make_symlink() {
	local file_name="$1"
	local dot_file_path="$2"
	local file_path="$3"

	# With sudo ?
	[[ "$4" == "sudo"  ]] && local with_sudo="sudo " || with_sudo=""

	if [[ ! -d "$BACKUP_DIR" ]]; then
		echo_error "Backup directory $BACKUP_DIR doesn\'t exist"
		exit 2
	fi

	# If file_path is not already a symlink or doesn't exist
	if [[ ! -L "$file_path" ]]; then

		# File or directory already exist, make backup
		if [[ -f "$file_path" ]] || [[ -d "$file_path" ]]; then
			echo_warning "Backup current $file_name in $BACKUP_DIR/$file_name.bak"
			${with_sudo} mv "$file_path" "$BACKUP_DIR/$file_name.bak"
		fi

		# Make symlink
		echo_success "Make symlink $dot_file_path -> $file_path"
		${with_sudo} ln -s --force "$dot_file_path" "$file_path"
	else
		echo_info "$file_name is already installed"
	fi
}

# Create directory if necessary
# --------------------------------------------------------
dir_check() {
	local dir_path="$1"
	if [[ ! -d "$dir_path" ]]; then
		mkdir -p "$dir_path"
	fi
}

# Check for 404 and download a ressource (if file age > 7 days)
# --------------------------------------------------------
download_if_available() {
	local DOWNLOAD_URL="$1"
	local DESTINATION="$2"

	# Check file age
	if file_is_fresh "$DESTINATION" ; then
		echo_info "$(basename "$DOWNLOAD_URL") has been downloaded recently"
		return 0
	else
		echo_info "Download $(basename "$DOWNLOAD_URL")"
		if [[ $(curl -o /dev/null --silent --head --write-out '%{http_code}' "${DOWNLOAD_URL}") == 200 ]]; then
			curl -sS "$DOWNLOAD_URL" -o "$DESTINATION"
			echo_success "$(basename "$DOWNLOAD_URL") -> $DESTINATION"
			return 0
		else
			echo_error "$DOWNLOAD_URL isn't available"
			return  1
		fi
	fi
}

# Clone if doesn't exist, else update
# --------------------------------------------------------
clone_or_update() {
	local git_url="$1"
	local install_path="$2"
	local depot_name="$3"

	if [[ -d "$install_path" ]]; then
		# Update
		echo_info "Update $depot_name"
		( cd "$install_path" && git pull --quiet origin master )
	else
		# Clone
		echo_success "Install $depot_name"
		git clone --quiet "$git_url" "$install_path"
	fi
}

# Check if file is older than 7 days
# --------------------------------------------------------
file_is_fresh() {
	local file="$1"
	local agemax=604800 # seconds in 7 days

	if [[ -f "$file" ]]; then
		local agefile=$(($(date +%s) - $(stat -c '%Y' "$file")))
		if [[ "$agefile" -lt "$agemax" ]]; then
			return 0
		fi
	fi

	return 1
}

# Install
# ========================================================

# Requirements
# --------------------------------------------------------
if [[ ! -x "$(which git 2>/dev/null)" ]]; then
	echo_error "Git is missing. Aborting."
	exit 1
fi

# Clone or update dotfiles
# --------------------------------------------------------
echo_header "Dotfiles"
clone_or_update "https://github.com/Silvus/dotfiles.git" "$DOTFILES_DIR" "dotfiles"

# Bash
# --------------------------------------------------------
echo_header "Bash"
make_symlink "bash_aliases" "$DOTFILES_DIR/bash/bash_aliases" "$HOME/.bash_aliases"
make_symlink "completion_sshrc" "$DOTFILES_DIR/bash/completion/sshrc" "$BASH_COMPLETION_DIR/sshrc" "sudo"
make_symlink "completion_dev" "$DOTFILES_DIR/bash/completion/dev" "$BASH_COMPLETION_DIR/dev" "sudo"

# Git
# --------------------------------------------------------
echo_header "Git"
make_symlink "gitignore_global" "$DOTFILES_DIR/git/gitignore_global" "$HOME/.gitignore_global"

# Vim
# --------------------------------------------------------
if [[ -x "$(which vim 2>/dev/null)" ]]; then
	echo_header "Vim"
	dir_check "$HOME/.vim/backup"
	dir_check "$HOME/.vim/swap"
	dir_check "$HOME/.vim/colors"
	dir_check "$HOME/.vim/autoload"
	dir_check "$HOME/.vim/bundle"
	make_symlink "jellybeans.vim" "$DOTFILES_DIR/vim/colors/jellybeans.vim" "$HOME/.vim/colors/jellybeans.vim"
	make_symlink "vimrc" "$DOTFILES_DIR/vim/vimrc" "$HOME/.vimrc"
	make_symlink "vimrc_secure" "$DOTFILES_DIR/vim/vimrc_secure" "$HOME/.vim/.vimrc_secure"

	# Vim plugins
	echo_header "Vim plugins"

	# Pathogen
	download_if_available "https://raw.githubusercontent.com/tpope/vim-pathogen/master/autoload/pathogen.vim" "$HOME/.vim/autoload/pathogen.vim"

	clone_or_update "https://github.com/kien/ctrlp.vim.git" "$HOME/.vim/bundle/ctrlp" "ctrlp"
	clone_or_update "https://github.com/bling/vim-airline.git" "$HOME/.vim/bundle/vim-airline" "vim-airline"
	clone_or_update "https://github.com/scrooloose/syntastic.git" "$HOME/.vim/bundle/syntastic" "syntastic"
	clone_or_update "https://github.com/tpope/vim-commentary.git" "$HOME/.vim/bundle/vim-commentary" "vim-commentary"
	clone_or_update "https://github.com/ervandew/supertab.git" "$HOME/.vim/bundle/supertab" "supertab"
	clone_or_update "https://github.com/fatih/vim-go.git" "$HOME/.vim/bundle/vim-go" "vim-go"
	clone_or_update "https://github.com/scrooloose/nerdtree.git" "$HOME/.vim/bundle/nerdtree" "nerdtree"
fi

# Tmux
# --------------------------------------------------------
if [[ -x "$(which tmux 2>/dev/null)" ]]; then
	echo_header "Tmux"
	make_symlink "tmux.conf" "$DOTFILES_DIR/tmux/tmux.conf" "$HOME/.tmux.conf"
fi

# PHP
# --------------------------------------------------------
if [[ -x "$(which php 2>/dev/null)" ]]; then
	echo_header "PHP"
	# Composer
	download_if_available "https://getcomposer.org/composer.phar" "$DOTFILES_DIR/bin/composer"
	chmod 770 "$DOTFILES_DIR/bin/composer"
	make_symlink "completion_composer" "$DOTFILES_DIR/bash/completion/composer" "$BASH_COMPLETION_DIR/composer" "sudo"
fi

# Go
# --------------------------------------------------------
if [[ -x "$(which go 2>/dev/null)" ]]; then
	# Completion
	echo_header "Go"
	make_symlink "completion_go" "$DOTFILES_DIR/bash/completion/go" "$BASH_COMPLETION_DIR/go" "sudo"
fi

# SSHRC
# --------------------------------------------------------
echo_header "SSHRC"
download_if_available "https://raw.githubusercontent.com/Russell91/sshrc/master/sshrc" "$DOTFILES_DIR/bin/sshrc"
chmod 770 "$DOTFILES_DIR/bin/sshrc"

# sshrc.d
dir_check "$HOME/.sshrc.d"
make_symlink "vimrc_sshrc" "$DOTFILES_DIR/vim/vimrc_sshrc" "$HOME/.sshrc.d/.vimrc"

# Generated sshrc config
echo_success "Generate sshrc config"
echo -e "# DO NOT EDIT THIS FILE BY HAND.\n# YOUR CHANGES WILL BE OVERWRITTEN !\n" > "$SSHRC_CONFIG_FILE"
cat "$DOTFILES_DIR/sshrc/sshrc_main" >> "$SSHRC_CONFIG_FILE"
cat "$DOTFILES_DIR/bash/aliases/01_main.bash" >> "$SSHRC_CONFIG_FILE"
cat "$DOTFILES_DIR/bash/aliases/06_prompt.bash" >> "$SSHRC_CONFIG_FILE"
cat "$DOTFILES_DIR/sshrc/sshrc_ascii" >> "$SSHRC_CONFIG_FILE"

# Lynx
# --------------------------------------------------------
if [[ -x "$(which lynx 2>/dev/null)" ]]; then
    echo_header "Lynx"
    dir_check "$HOME/.lynx"
    make_symlink "lynxrc" "$DOTFILES_DIR/lynx/lynxrc" "$HOME/.lynx/.lynxrc"
    make_symlink "lynx.lss" "$DOTFILES_DIR/lynx/lynx.lss" "$HOME/.lynx/lynx.lss"
    make_symlink "lynx_bookmarks.html" "$DOTFILES_DIR/lynx/lynx_bookmarks.html" "$HOME/.lynx/lynx_bookmarks.html"
fi

# Ranger
# --------------------------------------------------------
if [[ -x "$(which ranger 2>/dev/null)" ]]; then
    echo_header "Ranger"
    dir_check "$HOME/.config/ranger"
    make_symlink "rc.conf" "$DOTFILES_DIR/ranger/rc.conf" "$HOME/.config/ranger/rc.conf"
    make_symlink "rifle.conf" "$DOTFILES_DIR/ranger/rifle.conf" "$HOME/.config/ranger/rifle.conf"
fi

# MOC
# --------------------------------------------------------
if [[ -x "$(which mocp 2>/dev/null)" ]]; then
    echo_header "MOC"
    dir_check "$HOME/.moc/themes"
    make_symlink "moc_config" "$DOTFILES_DIR/moc/config" "$HOME/.moc/config"
    chmod 644 "$HOME/.moc/config" # Need to be not writable by other
    make_symlink "moc_theme" "$DOTFILES_DIR/moc/dot_theme" "$HOME/.moc/themes/dot_theme"
fi

# i3
# --------------------------------------------------------
if [[ -x "$(which i3 2>/dev/null)" ]]; then
    echo_header "i3"
    dir_check "$HOME/.i3"

    make_symlink "conky_launcher" "$DOTFILES_DIR/i3/conky_launcher" "$HOME/.i3/conky_launcher"
    chmod 770 "$HOME/.i3/conky_launcher"
    make_symlink "conky_statusbar" "$DOTFILES_DIR/i3/conky_statusbar" "$HOME/.i3/conky_statusbar"

	SCREEN_COUNT=$(xrandr -q | grep ' connected' | wc -l)

	# Generated i3 config
	echo_success "Generate i3 config (screens : $SCREEN_COUNT)"

	echo -e "# DO NOT EDIT THIS FILE BY HAND.\n# YOUR CHANGES WILL BE OVERWRITTEN !\n" > "$I3_CONFIG_FILE"
	cat "$DOTFILES_DIR/i3/config_main" >> "$I3_CONFIG_FILE"

	if [[ "$SCREEN_COUNT" -gt 1 ]]; then
		# Dual screen
		make_symlink "i3_status" "$DOTFILES_DIR/i3/i3status_dual.conf" "$HOME/.i3/i3status.conf"
		cat "$DOTFILES_DIR/i3/config_bar_dual" >> "$I3_CONFIG_FILE"
	else
		# Simple screen
		make_symlink "i3_status" "$DOTFILES_DIR/i3/i3status.conf" "$HOME/.i3/i3status.conf"
		cat "$DOTFILES_DIR/i3/config_bar" >> "$I3_CONFIG_FILE"
	fi

	cat "$DOTFILES_DIR/i3/config_apps" >> "$I3_CONFIG_FILE"
fi

# Conky
# --------------------------------------------------------
if [[ -x "$(which conky 2>/dev/null)" ]]; then
	echo_header "Conky"
	make_symlink "conkyrc" "$DOTFILES_DIR/conky/conkyrc" "$HOME/.conkyrc"
fi

# Newsbeuter
# --------------------------------------------------------
if [[ -x "$(which newsbeuter 2>/dev/null)" ]]; then
	echo_header "Newsbeuter"
	dir_check "$HOME/.newsbeuter"
	make_symlink "newsbeuter_config" "$DOTFILES_DIR/newsbeuter/config" "$HOME/.newsbeuter/config"
	make_symlink "newsbeuter_browse" "$DOTFILES_DIR/newsbeuter/browse" "$HOME/.newsbeuter/browse"
	make_symlink "newsbeuter_urls" "$DOTFILES_DIR/newsbeuter/urls" "$HOME/.newsbeuter/urls"
fi

# Virtualenvwrapper
# --------------------------------------------------------
if [[ -d "/data/dev/.virtualenvs" ]]; then
    echo_header "Virtualenv Hooks"
    make_symlink "postactivate" "$DOTFILES_DIR/virtualenvs/postactivate" "/data/dev/.virtualenvs/postactivate"
fi

# Sublime Text 3
# --------------------------------------------------------
if [[ -d "/opt/sublime_text" ]]; then
	echo_header "Sublime Text 3"
	make_symlink "Sublime-keymap" "$DOTFILES_DIR/sublime_text_3/Default (Linux).sublime-keymap" "$SUBLIMETEXT_CONF_DIR/Default (Linux).sublime-keymap"
	make_symlink "Preferences" "$DOTFILES_DIR/sublime_text_3/Preferences.sublime-settings" "$SUBLIMETEXT_CONF_DIR/Preferences.sublime-settings"
	make_symlink "Side Bar" "$DOTFILES_DIR/sublime_text_3/Side Bar.sublime-settings" "$SUBLIMETEXT_CONF_DIR/Side Bar.sublime-settings"
	make_symlink "Markdown" "$DOTFILES_DIR/sublime_text_3/Markdown.sublime-settings" "$SUBLIMETEXT_CONF_DIR/Markdown.sublime-settings"
	make_symlink "PHP" "$DOTFILES_DIR/sublime_text_3/PHP.sublime-settings" "$SUBLIMETEXT_CONF_DIR/PHP.sublime-settings"
	make_symlink "Python" "$DOTFILES_DIR/sublime_text_3/Python.sublime-settings" "$SUBLIMETEXT_CONF_DIR/Python.sublime-settings"
	make_symlink "YAML" "$DOTFILES_DIR/sublime_text_3/YAML.sublime-settings" "$SUBLIMETEXT_CONF_DIR/YAML.sublime-settings"
	make_symlink "LaTeXTools" "$DOTFILES_DIR/sublime_text_3/LaTeXTools.sublime-settings" "$SUBLIMETEXT_CONF_DIR/LaTeXTools.sublime-settings"
fi

# End
# --------------------------------------------------------
echo_header "End"
exit 0

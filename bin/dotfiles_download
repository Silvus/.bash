#! /usr/bin/env python3

"""
Download file and set executable permission
Only if file is older than 7 days
"""

import os
import sys
import time
import configparser
from urllib.request import Request, urlretrieve
from urllib.error import URLError, HTTPError


"""
Prints with colors
"""
COLOR_RESET = '\033[0m'
COLOR_RED = '\033[31m'
COLOR_GREEN = '\033[32m'
COLOR_YELLOW = '\033[33m'
COLOR_BLUE = '\033[34m'

def print_header(message):
    print(COLOR_BLUE + "⦿ " + COLOR_RESET + message)

def print_success(message):
    print(COLOR_GREEN + "    ✔ " + COLOR_RESET + message)

def print_info(message):
    print(COLOR_BLUE + "    ➤ " + COLOR_RESET + message)

def print_warning(message):
    print(COLOR_YELLOW + "    ⚠ " + COLOR_RESET + message)

def print_error(message):
    print(COLOR_RED + "    ✖ " + COLOR_RESET + message)


def read_config(section):
    """
    Read config file
    """
    # Check for config file
    if os.path.isfile(config_file):
        # Read conf
        config = configparser.ConfigParser()
        config.read(config_file)
        if config[section].items():
            # Download each item in "download" section
            for destination, url in config[section].items():
                download(url, os.path.expanduser(destination))
    else:
        # Config not found
        print_error("Config file "+config_file+" doesn\'t exist")
        sys.exit(1)

def report_download(count, blockSize, totalSize):
    """
    Report download status in percentage
    """
    percent = int(count*blockSize*100/totalSize)
    sys.stdout.write("\r%d%%" % percent + ' complete')
    sys.stdout.flush()

def download(url, destination):
    """
    Check url status and download file
    """
    # Create parents folders
    assure_path_exist(destination)

    if need_to_download(destination):
        req = Request(url)
        try:
            urlretrieve(url, destination, reporthook=report_download)
        except HTTPError as e:
            print_warning(url, 'unavailable.', 'Error code:', e.code)
        except URLError as e:
            print_warning(url, 'unavailable.', 'Reason:', e.reason)
        else:
            # everything is fine
            os.chmod(destination, 0o755)
            sys.stdout.flush()
            sys.stdout.write("\r" + COLOR_GREEN + "    ✔ " + COLOR_RESET + "Download complete: %s" % os.path.basename(destination) + '\n')
    else:
        print_success('Already present: ' + os.path.basename(destination))

def assure_path_exist(path):
    """
    Create parents folders
    """
    dir = os.path.dirname(path)
    if not os.path.exists(dir):
        os.makedirs(dir)

def need_to_download(path):
    """
    Check if destination exist and is older than 7 days
    """
    if os.path.isfile(path):
        # File exist, check his age
        now = time.time()
        limit = 60*60*24*7 # Number of seconds in 7 days
        return os.stat(path).st_mtime < now - limit
    else:
        # File doesn't exist
        return True


if __name__ == '__main__':
    config_file = os.path.expanduser('~/.dotfiles/dotconf')

    read_config('download')
    sys.exit(0)


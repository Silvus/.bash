#! /usr/bin/env python3

"""
Scan "app" directory and create an equivalent symlink
in home for each file.
If X is running, scan also "appdesktop"

"""

import sys
import os

"""
Prints with colors
"""
COLOR_RESET = '\033[0m'
COLOR_RED = '\033[31m'
COLOR_GREEN = '\033[32m'
COLOR_YELLOW = '\033[33m'
COLOR_BLUE = '\033[34m'

def print_header(message):
    print(COLOR_BLUE + "⦿ " + COLOR_RESET + message)

def print_success(message):
    print(COLOR_GREEN + "    ✔ " + COLOR_RESET + message)

def print_info(message):
    print(COLOR_BLUE + "    ➤ " + COLOR_RESET + message)

def print_warning(message):
    print(COLOR_YELLOW + "    ⚠ " + COLOR_RESET + message)

def print_error(message):
    print(COLOR_RED + "    ✖ " + COLOR_RESET + message)

def scan_arbo(rootSource, rootDestination):
    for dirName, subdirList, fileList in os.walk(rootSource):
        for fileName in fileList:
            # Get relative dir from dotfiles root
            relativeDir = os.path.relpath(dirName, rootSource)
            # Add file name and handle "." (with normpath)
            relativeFile = os.path.normpath(os.path.join(relativeDir, fileName))

            # Create absolutes paths
            source = os.path.join(rootSource, relativeFile)
            destination = os.path.join(rootDestination, relativeFile)

            if symlink(source, destination):
                print_success('➜ ' + relativeFile)
            else:
                print_error(source +" doesn\'t exist")
                return False
    return True

def symlink(src, dest):
    # Remove existing symlink
    if os.path.lexists(dest):
            os.remove(dest)
    # Check if source exist
    if os.path.exists(src):
        # Create directories if necessary
        assure_path_exist(dest)
        # Make symlink
        os.symlink(src, dest)
        return True
    else:
        return False

def assure_path_exist(path):
        dir = os.path.dirname(path)
        if not os.path.exists(dir):
                os.makedirs(dir)

# def is_installed(prog):
#     from shutil import which
#     return which(prog) is not None

def X_is_running():
    from subprocess import Popen, PIPE
    p = Popen(["xset", "-q"], stdout=PIPE, stderr=PIPE)
    p.communicate()
    return p.returncode == 0


if __name__ == '__main__':
    rootSource = os.path.expanduser('~/.dotfiles/app')
    rootDesktopSource = os.path.expanduser('~/.dotfiles/appdesktop')
    rootDestination = os.path.expanduser('~')

    if scan_arbo(rootSource, rootDestination):
        if X_is_running():
            scan_arbo(rootDesktopSource, rootDestination)
            sys.exit(0)
        sys.exit(0)

    sys.exit(1)

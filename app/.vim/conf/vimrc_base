set nocompatible          " Get rid of Vi compatibility mode


" Misc
" ------------------------------------------------------------------------------------
set wildmenu              " Show list instead of just completing
set nowrap                " Don't wrap text
set display=lastline      " Show as much as possible of a wrapped last line, not just "@"
set backspace=2           " Backspace in insert mode works like other editors
set encoding=utf-8        " Encoding
set cm=blowfish           " Cryptmethod
set hidden                " Switch between buffers without saving
set splitright            " New vsplit windows to the right of the current
set splitbelow            " New split windows to the bottom of the current
set spelllang=en,fr

" Understand *.md as markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown wrap linebreak nolist textwidth=0 wrapmargin=0

" Jump to the last position when reopening a file
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Timeout for key sequences
" Fix for vim-airline pause when leaving insert mode but without breaking
" leader key
if ! has('gui_running')
	set ttimeoutlen=10
	augroup FastEscape
		autocmd!
		au InsertEnter * set timeoutlen=50
		au InsertLeave * set timeoutlen=1000
	augroup END
endif

" Spaces - Tabs - Indent - Fold
" ------------------------------------------------------------------------------------
filetype on
filetype plugin on
filetype indent on        " Load filetype-specific indent files

set list                  " Show special characters
set listchars=tab:\ \ ,trail:•,extends:#,nbsp:.
set showbreak=↪           " Line wraps character

set tabstop=4             " Number of visual spaces per TAB
set softtabstop=4         " Number of spaces in tab when editing
set shiftwidth=4          " When indenting with '>', use x spaces width
" set expandtab           " Tabs are spaces

" Tabs (default)
autocmd FileType * setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab

" Spaces
autocmd FileType python,xml setlocal tabstop=4 shiftwidth=4 softtabstop=4 expandtab

" Specific
autocmd FileType make setlocal tabstop=8 shiftwidth=8 softtabstop=8 noexpandtab
autocmd FileType yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab

" Fold
set foldmethod=indent     " Fold based on indent
set foldlevel=1
set foldlevelstart=1
set foldnestmax=1         " Deepest fold level
" set foldcolumn=1        " See the folds
set nofoldenable          " Don't fold by default

" Search
" ------------------------------------------------------------------------------------
set incsearch             " Find as you type search
set hlsearch              " Highlight search terms
set ignorecase            " Make searches case-insensitive.
" set gdefault              " The substitute flag g is on


" Backups and undo
" ------------------------------------------------------------------------------------
" Swap files out of the project root
set backup
set backupdir=~/.vim/backup/
set directory=~/.vim/swap/
" Persistent undo history
set undofile
set undodir=~/.vim/undo/


" Clipboard
" ------------------------------------------------------------------------------------
" In line copy and paste to system clipboard
" vmap <C-c> y:call system("xclip -i -selection clipboard", getreg("\""))<CR>:call system("xclip -i", getreg("\""))<CR>
" nmap <C-v> :call setreg("\"",system("xclip -o -selection clipboard"))<CR>p

" use + buffer (the system clipboard) if +xterm_clipboard
if has('unnamedplus')
	set clipboard=unnamed,unnamedplus
endif


" Tmux Fix : http://sunaku.github.io/vim-256color-bce.html
" ------------------------------------------------------------------------------------
if &term =~ '256color'
	set t_ut=
endif

if &term =~ '^screen'
	" tmux will send xterm-style keys when its xterm-keys option is on
	execute "set <xUp>=\e[1;*A"
	execute "set <xDown>=\e[1;*B"
	execute "set <xRight>=\e[1;*C"
	execute "set <xLeft>=\e[1;*D"
endif


" Keymaps
" ------------------------------------------------------------------------------------
let mapleader="!"

" Move through wrapped lines
nnoremap <silent> <Up> gk
inoremap <silent> <Up> <C-o>gk
nnoremap <silent> <Down> gj
inoremap <silent> <Down> <C-o>gj
nnoremap <silent> <home> g<home>
inoremap <silent> <home> <C-o>g<home>
nnoremap <silent> <End> g<End>
inoremap <silent> <End> <C-o>g<End>

" Split with Ctrl + hjkl
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Ctrl + arrow: move quickly
nnoremap <silent> <C-Up> 5k
nnoremap <silent> <C-Down> 5j

" Shift + arrow: select text
nmap <S-Up> v<Up>
nmap <S-Down> v<Down>
nmap <S-Left> v<Left>
nmap <S-Right> v<Right>
vmap <S-Up> <Up>
vmap <S-Down> <Down>
vmap <S-Left> <Left>
vmap <S-Right> <Right>

" Cycling through buffers
nnoremap <C-n> :bnext<CR>
nnoremap <C-b> :bprevious<CR>
nnoremap <C-w> :bd<CR>

" Save with Ctrl + s
nmap <c-s> :w<CR>
imap <c-s> <Esc>:w<CR>a

" Toggle folds
nnoremap <space> za

" Reload .vimrc
nnoremap <Leader>r :source $MYVIMRC<CR>

" Toggle line numbers
nmap <silent> <F10> :set invnumber<bar>:set invrelativenumber<CR>

" Redraws the screen and removes any search highlighting.
nnoremap <silent> <C-l> :nohl<CR><C-l>

" Panic button
map <F4> mzggg?G`z

" Execute current file
nnoremap <F5> :!%:p<CR>

" Insert current date
nnoremap <F6> "=strftime("%Y-%m-%d %T")<CR>P
inoremap <F6> <C-R>=strftime("%Y-%m-%d %T")<CR>

" Indentation on paste
set pastetoggle=<F9>
" nnoremap p ]p
" nnoremap P p

" Spellchecking
nnoremap <F12> :setlocal spell! spell?<CR>

" GoTo
nnoremap <leader>g :YcmCompleter GoTo<CR>


" Commands
" ------------------------------------------------------------------------------------
" Trim trailing spaces
function! StripTrailingWhitespaces()
	" Preparation: save last search, and cursor position.
	let _s=@/
	let l = line(".")
	let c = col(".")
	" Do the business:
	%s/\s\+$//e
	" Clean up: restore previous search history, and cursor position
	let @/=_s
	call cursor(l, c)
endfunction
command! StripTrailingWhitespaces call StripTrailingWhitespaces()

" Yapf
command! Yapf :0,$!yapf
autocmd FileType python nnoremap <leader>y :0,$!yapf<Cr>

" :W - To write with root rights
command! W :execute ':silent w !sudo tee % > /dev/null' | :edit!

" Theme
" ------------------------------------------------------------------------------------
set t_Co=256              " Enable 256-color mode.
syntax enable             " Enable syntax highlighting (previously syntax on).
colorscheme jellybeans    " Set colorscheme
" set background=dark

set ruler                 " Always show info along bottom.
set rulerformat=''

set number                " Show line numbers
set relativenumber        " Show relative line numbers
" set cursorline            " Highlights the current line
set showmode              " Current mode in status line
set showcmd               " Display the number of (characters|lines) in visual mode, also cur command
set scrolloff=10          " Places a line between the current line and the screen edge
set sidescrolloff=5       " Places a couple columns between the current column and the screen edge
set showmatch             " Show matching brackets when text indicator is over them

" Highlights the current line on insert
autocmd InsertEnter * set cul
autocmd InsertLeave * set nocul


" Status line
" ------------------------------------------------------------------------------------
set laststatus=2          " Last window always has a statusline

set statusline=
set statusline+=\ %<%f\                             " File name
set statusline+=\ %y\                               " File type
set statusline+=\ %h%m%r%w\                         " Modified? Readonly?
set statusline+=%=                                  " Switch to the right side
set statusline+=\ %c\                               " Colnr
set statusline+=\ %l/%L\                            " Current line / Total lines
set statusline+=\ %P\                               " Percent through file
